# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except ImportError:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class DashboardService(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def list_all_narratives(self, params, context=None):
        """
        :param params: instance of type "ListAllNarrativesParams" ->
           structure: parameter "just_modified_after" of type "timestamp" (A
           time in the format YYYY-MM-DDThh:mm:ssZ, where Z is either the
           character Z (representing the UTC timezone) or the difference in
           time to UTC in the format +/-HHMM, eg: 2012-12-17T23:24:06-0500
           (EST time) 2013-04-03T08:56:32+0000 (UTC time)
           2013-04-03T08:56:32Z (UTC time))
        :returns: multiple set - (1) parameter "result" of type
           "ListAllNarrativesResult" (typedef structure { workspace_info
           workspace; object_info object; list<UserPermission> permissions; }
           NarrativeX;) -> structure: parameter "narratives" of list of type
           "Narrative" -> structure: parameter "objectId" of type "obj_id",
           parameter "objectVersion" of type "obj_ver", parameter "owner" of
           String, parameter "permission" of String, parameter "isPublic" of
           type "boolean" (@range [0,1]), parameter "isNarratorial" of type
           "boolean" (@range [0,1]), parameter "title" of String, parameter
           "savedTime" of Long, parameter "savedBy" of String, parameter
           "permissions" of list of type "UserPermission" -> structure:
           parameter "username" of type "Username", parameter "permission" of
           type "permission" (Represents the permissions a user or users have
           to a workspace: 'a' - administrator. All operations allowed. 'w' -
           read/write. 'r' - read. 'n' - no permissions.), parameter
           "cellTypes" of list of type "NarrativeCellStat" (typedef
           UnspecifiedObject NarrativePermission;) -> unspecified object,
           parameter "apps" of list of type "NarrativeApp" -> structure:
           parameter "id" of String, parameter "count" of Long, parameter
           "profiles" of mapping from type "Username" to type "UserProfile"
           (LIST ALL NARRATIVES) -> unspecified object, parameter "apps" of
           mapping from type "AppID" (Just the subset of info that the front
           end will use) to type "App" -> structure: parameter "id" of type
           "AppID" (Just the subset of info that the front end will use),
           parameter "notFound" of type "boolean" (@range [0,1]), parameter
           "title" of String, parameter "subtitle" of String, parameter
           "iconURL" of String, (2) parameter "error" of type "Error" ->
           structure: parameter "message" of String, parameter "type" of
           String, parameter "code" of String, parameter "info" of
           unspecified object, (3) parameter "stats" of type "RunStats" ->
           structure: parameter "timings" of list of tuple of size 2: String,
           Long
        """
        return self._client.call_method('DashboardService.list_all_narratives',
                                        [params], self._service_ver, context)

    def create_narrative(self, param, context=None):
        """
        :param param: instance of type "CreateNarrativeParam" (Create
           Narrative) -> structure: parameter "title" of String, parameter
           "name" of type "ws_name"
        :returns: multiple set - (1) parameter "result" of type
           "CreateNarrativeResult" -> structure: parameter "narrative" of
           type "Narrative" -> structure: parameter "objectId" of type
           "obj_id", parameter "objectVersion" of type "obj_ver", parameter
           "owner" of String, parameter "permission" of String, parameter
           "isPublic" of type "boolean" (@range [0,1]), parameter
           "isNarratorial" of type "boolean" (@range [0,1]), parameter
           "title" of String, parameter "savedTime" of Long, parameter
           "savedBy" of String, parameter "permissions" of list of type
           "UserPermission" -> structure: parameter "username" of type
           "Username", parameter "permission" of type "permission"
           (Represents the permissions a user or users have to a workspace:
           'a' - administrator. All operations allowed. 'w' - read/write. 'r'
           - read. 'n' - no permissions.), parameter "cellTypes" of list of
           type "NarrativeCellStat" (typedef UnspecifiedObject
           NarrativePermission;) -> unspecified object, parameter "apps" of
           list of type "NarrativeApp" -> structure: parameter "id" of
           String, parameter "count" of Long, (2) parameter "error" of type
           "Error" -> structure: parameter "message" of String, parameter
           "type" of String, parameter "code" of String, parameter "info" of
           unspecified object
        """
        return self._client.call_method('DashboardService.create_narrative',
                                        [param], self._service_ver, context)

    def delete_narrative(self, params, context=None):
        """
        :param params: instance of type "DeleteNarrativeParams" (Delete
           Narrative) -> structure: parameter "obji" of type "ObjectIdentity"
           -> structure: parameter "workspace_id" of type "ws_id" (from
           workspace_deluxe Note too that naming conventions for parameters
           using these types (may) also use the workspace_deluxe conventions.
           workspace), parameter "object_id" of type "obj_id", parameter
           "version" of type "obj_ver"
        :returns: instance of type "Error" -> structure: parameter "message"
           of String, parameter "type" of String, parameter "code" of String,
           parameter "info" of unspecified object
        """
        return self._client.call_method('DashboardService.delete_narrative',
                                        [params], self._service_ver, context)

    def share_narrative(self, params, context=None):
        """
        :param params: instance of type "ShareNarrativeParams" (Share
           Narrative) -> structure: parameter "wsi" of type
           "WorkspaceIdentity" -> structure: parameter "workspace" of type
           "ws_name", parameter "id" of type "ws_id" (from workspace_deluxe
           Note too that naming conventions for parameters using these types
           (may) also use the workspace_deluxe conventions. workspace),
           parameter "users" of list of type "Username", parameter
           "permission" of type "permission" (Represents the permissions a
           user or users have to a workspace: 'a' - administrator. All
           operations allowed. 'w' - read/write. 'r' - read. 'n' - no
           permissions.)
        :returns: instance of type "Error" -> structure: parameter "message"
           of String, parameter "type" of String, parameter "code" of String,
           parameter "info" of unspecified object
        """
        return self._client.call_method('DashboardService.share_narrative',
                                        [params], self._service_ver, context)

    def unshare_narrative(self, params, context=None):
        """
        :param params: instance of type "UnshareNarrativeParams" ->
           structure: parameter "wsi" of type "WorkspaceIdentity" ->
           structure: parameter "workspace" of type "ws_name", parameter "id"
           of type "ws_id" (from workspace_deluxe Note too that naming
           conventions for parameters using these types (may) also use the
           workspace_deluxe conventions. workspace), parameter "users" of
           list of type "Username"
        :returns: instance of type "Error" -> structure: parameter "message"
           of String, parameter "type" of String, parameter "code" of String,
           parameter "info" of unspecified object
        """
        return self._client.call_method('DashboardService.unshare_narrative',
                                        [params], self._service_ver, context)

    def share_narrative_global(self, params, context=None):
        """
        :param params: instance of type "ShareNarrativeGlobalParams" ->
           structure: parameter "wsi" of type "WorkspaceIdentity" ->
           structure: parameter "workspace" of type "ws_name", parameter "id"
           of type "ws_id" (from workspace_deluxe Note too that naming
           conventions for parameters using these types (may) also use the
           workspace_deluxe conventions. workspace)
        :returns: instance of type "Error" -> structure: parameter "message"
           of String, parameter "type" of String, parameter "code" of String,
           parameter "info" of unspecified object
        """
        return self._client.call_method('DashboardService.share_narrative_global',
                                        [params], self._service_ver, context)

    def unshare_narrative_global(self, params, context=None):
        """
        :param params: instance of type "UnshareNarrativeGlobalParams" ->
           structure: parameter "wsi" of type "WorkspaceIdentity" ->
           structure: parameter "workspace" of type "ws_name", parameter "id"
           of type "ws_id" (from workspace_deluxe Note too that naming
           conventions for parameters using these types (may) also use the
           workspace_deluxe conventions. workspace)
        :returns: instance of type "Error" -> structure: parameter "message"
           of String, parameter "type" of String, parameter "code" of String,
           parameter "info" of unspecified object
        """
        return self._client.call_method('DashboardService.unshare_narrative_global',
                                        [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('DashboardService.status',
                                        [], self._service_ver, context)
